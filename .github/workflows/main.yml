name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Upload html test report
        uses: actions/upload-artifact@v4
        with:
          name: lint.html
          path: app/build/reports/problems/problems-report.html


  run-code-coverage-check:
      needs: [lint]
      runs-on: ubuntu-latest

      steps:
        # We update our codebase
        - name: Check out code
          uses: actions/checkout@v4

        # Specify and setup Java 17
        # (this will depend on the JDK version your project depends on)
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'

        # Important, always clean before running our newly created task
        # since we have been specifying different (autogenerated) paths
        # in our custom tasks and want nothing else in our build path.
        # Since we are checking out code from the repo and '**/build/**'
        # should be already excluded from it in your .gitignore, this should not
        # pose any trouble, but in any case, beware
        - name: Build and test with Gradle
          run: ./gradlew clean generateJacocoCoverageReport

        # Once our task has finished,
        # upload the unit tests report as an artifact!
        - name: Upload unit tests report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: unit-tests-report
            path: build/reports/tests/aggregate

        # Once our task has finished,
        # upload JaCoCo's report as an artifact!
        - name: Upload JaCoCo report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: jacoco-report
            path: build/reports/jacoco/generateJacocoCoverageReport/html

  unit-test:
    needs: [run-code-coverage-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Run tests
        run: ./gradlew test

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: unit_test_report
          path: app/build/reports/tests/testDebugUnitTest/

  package:
    needs: [unit-test]
    name: Generate APK
    #    if: ${{ !github.event.act }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Build debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: note_mvvm_application.apk
          path: app/build/outputs/apk/debug/app-debug.apk

  #
  #  instrumentation-test:
  #    needs: [unit-test]
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout the code
  #        uses: actions/checkout@v4
  #
  #      - name: Run espresso tests
  #        uses: reactivecircus/android-emulator-runner@v2
  #        with:
  #            api-level: 31
  #            target: google_apis
  #            arch: x86_64
  #            script: ./gradlew connectedCheck
  #            disable-animations: true
  #            emulator-options: -no-window -no-snapshot-save -noaudio -no-boot-anim
  #            working-directory: .
  #            boot-timeout-minutes: 5
  #
  #      - name: Upload test report
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: instrumentation_test_report
  #          path: app/build/reports/androidTests/connected/

  ##
  #  static-code-analysis:
  #    needs: [lint]
  ##    if: ${{ !github.event.act }}
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout the code
  #        uses: actions/checkout@v4
  #
  #      - name: set up JDK 17
  #        uses: actions/setup-java@v1
  #        with:
  #          java-version: 17
  #
  #      - name: SonarCloud Scan
  #        run: ./gradlew sonarqube -Dsonar.login=${{ secrets.note_mvvm_application }}
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.NOTE_MVVM_APPLICATION }}

  #  static-code-analysis:
#    needs: [ lint ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: 17
#
#      - name: SonarCloud Scan
##        run: ./gradlew sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew sonar-scanner -Dsonar.host.url=https://sonarcloud.io
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  static-code-analysis:
#    needs: [ lint ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: 17
#
#      - name: SonarCloud Scan
#        run: ./gradlew sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.note_mvvm_application }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.NOTE_MVVM_APPLICATION }}
#
#  package:
#    needs: [static-code-analysis]
#    name: Generate APK
##    if: ${{ !github.event.act }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v4
#        with:
#          name: note_mvvm_application.apk
#          path: app/build/outputs/apk/debug/app-debug.apk


#New-1------------------
#
#name: CI
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#  workflow_dispatch:
#
#jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Upload html test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: lint.html
#          path: app/build/reports/problems/problems-report.html
#
#  unit-test:
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest/
#
#  static-code-analysis:
#    needs: [unit-test] # <-- Removed instrumentation-test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: SonarCloud Scan
#        run: ./gradlew sonar -Dsonar.login=${{ secrets.NOTE_MVVM_APPLICATION }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  package:
#    needs: [static-code-analysis]
#    name: Generate APK
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v4
#        with:
#          name: expense-manager.apk
#          path: app/build/outputs/apk/debug/app-debug.apk

#New-2------------------

#name: CI
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#  workflow_dispatch:
#
#jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Upload html test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: lint.html
#          path: app/build/reports/problems/problems-report.html

#  static-code-analysis:
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@master
#        with:
#          projectBaseDir: .
#        env:
#          SONAR_TOKEN: ${{ secrets.note_mvvm_application }}
#          GITHUB_TOKEN: ${{ secrets.NOTE_MVVM_APPLICATION }}
#
#  package:
#    needs: [lint]
#    name: Generate APK
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v4
#        with:
#          name: note_mvvm_application.apk
#          path: app/build/outputs/apk/debug/app-debug.apk

